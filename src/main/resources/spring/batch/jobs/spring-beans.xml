<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans" xmlns:batch="http://www.springframework.org/schema/batch" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:util="http://www.springframework.org/schema/util" xsi:schemaLocation="http://www.springframework.org/schema/batch   http://www.springframework.org/schema/batch/spring-batch-2.2.xsd   http://www.springframework.org/schema/beans    http://www.springframework.org/schema/beans/spring-beans-3.2.xsd   http://www.springframework.org/schema/util  http://www.springframework.org/schema/util/spring-util-3.1.xsd">
   <import resource="../config/spring-context.xml" />
   <import resource="../config/spring-datasource.xml" />
   <bean id="report" class="com.jcg.spring.batch.Report" scope="prototype" />
   <bean id="itemProcessor" class="com.jcg.spring.batch.CustomItemProcessor" />
    <bean id="itemProcessor2" class="com.jcg.spring.batch.RowItemProcessor" />
   <batch:job id="helloWorldJob">
      <batch:step id="step1" next="step3">
         <batch:tasklet>
           <bean class="com.jcg.spring.batch.TableMetadataExtractor">
               <property name="jdbcTemplate" ref="jdbcTemplate"/>
           </bean>
         </batch:tasklet>
      </batch:step>
      <!--<batch:step id="step2">
         <batch:tasklet>
            <batch:chunk reader="cvsFileItemReader" writer="jdbcItemWriter" processor="itemProcessor" commit-interval="10" />
         </batch:tasklet>
      </batch:step>-->
       <batch:step id="step3" allow-start-if-complete="1">
           <batch:tasklet>
               <batch:chunk reader="cvsFileItemReader2" writer="jdbcItemWriter2" processor="itemProcessor2" commit-interval="10000" skip-policy="skipPolicy"/>
           </batch:tasklet>
       </batch:step>


   </batch:job>

   <bean id="tokenizer" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
   </bean>
    <bean id="tokenizer2" class="org.springframework.batch.item.file.transform.DelimitedLineTokenizer">
        <property name="delimiter" value="Â¤"/>
    </bean>
   <bean id="header" class="com.jcg.spring.batch.HeaderLineCallbackHandler">
      <property name="lineTokenizer" ref="tokenizer"/>
   </bean>
    <bean id="header2" class="com.jcg.spring.batch.HeaderLineCallbackHandler">
        <property name="lineTokenizer" ref="tokenizer2"/>
    </bean>



    <bean id="cvsFileItemReader" class="org.springframework.batch.item.file.FlatFileItemReader">
      <property name="resource" value="classpath:cvs/input/sampleReport.csv" />
      <property name="lineMapper">
         <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
            <property name="lineTokenizer" ref="tokenizer"/>
            <property name="fieldSetMapper">
               <bean class="com.jcg.spring.batch.ReportFieldSetMapper" />
            </property>

         </bean>
      </property>
      <property name="linesToSkip" value="1"/>
      <property name="skippedLinesCallback" ref="header"/>
   </bean>
    <bean id="cvsFileItemReader2" class="org.springframework.batch.item.file.FlatFileItemReader">
        <property name="resource" value="classpath:cvs/input/test2.csv" />
        <property name="lineMapper">
            <bean class="org.springframework.batch.item.file.mapping.DefaultLineMapper">
                <property name="lineTokenizer" ref="tokenizer2"/>
                <property name="fieldSetMapper">
                    <bean class="org.springframework.batch.item.file.mapping.PassThroughFieldSetMapper" />
                </property>

            </bean>
        </property>
        <property name="linesToSkip" value="1"/>
        <property name="skippedLinesCallback" ref="header2"/>
    </bean>

   <bean id="xmlItemWriter" class="org.springframework.batch.item.xml.StaxEventItemWriter">
      <property name="resource" value="file:xml/outputs/report.xml" />
      <property name="marshaller" ref="reportMarshaller" />
      <property name="rootTagName" value="report" />
   </bean>
   <bean id="reportMarshaller" class="org.springframework.oxm.jaxb.Jaxb2Marshaller">
      <property name="classesToBeBound">
         <list>
            <value>com.jcg.spring.batch.Report</value>
         </list>
      </property>
   </bean>

    <bean id="jdbcItemWriter" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="assertUpdates" value="true" />
        <property name="itemSqlParameterSourceProvider">
            <bean class="com.jcg.spring.batch.ProductMapSqlParameterSourceProvider" />
        </property>
        <property name="sql">
            <util:constant static-field="com.jcg.spring.batch.ProductMapSqlParameterSourceProvider.SQL"/>
        </property>
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="jdbcItemWriter2" class="org.springframework.batch.item.database.JdbcBatchItemWriter">
        <property name="assertUpdates" value="false" />
        <property name="itemSqlParameterSourceProvider">
            <bean class="com.jcg.spring.batch.CsvRowMapSqlParameterSourceProvider" scope="step">
                <property name="context" value="#{stepExecution}"/>
            </bean>

        </property>
        <property name="sql">
            <util:constant static-field="com.jcg.spring.batch.CsvRowMapSqlParameterSourceProvider.SQL"/>
        </property>
        <property name="dataSource" ref="dataSource" />
    </bean>

    <bean id="skipPolicy" class="com.jcg.spring.batch.SkipRowPolicy">
        <property name="skipLimit" value="10" />
    </bean>
</beans>